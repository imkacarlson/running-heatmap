package com.run.heatmap;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.webkit.WebView;

import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.core.view.WindowInsetsControllerCompat;

import com.getcapacitor.BridgeActivity;

import java.util.Locale;

public class MainActivity extends BridgeActivity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        // 1️⃣  Register the plugin first, while the bridge is not yet built
        this.registerPlugin(HttpRangeServerPlugin.class);

        // 2️⃣  Now let BridgeActivity build the bridge (it will include our plugin)
        super.onCreate(savedInstanceState);

        configureEdgeToEdgeWindowInsets();
    }

    private void configureEdgeToEdgeWindowInsets() {
        // Draw behind system bars and handle insets manually so UI controls stay visible
        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);
        getWindow().setStatusBarColor(Color.TRANSPARENT);
        getWindow().setNavigationBarColor(Color.TRANSPARENT);

        if (getBridge() == null || getBridge().getWebView() == null) {
            return;
        }

        final View rootView = getBridge().getWebView();

        ViewCompat.setOnApplyWindowInsetsListener(rootView, (view, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            // Don't apply padding to WebView - let CSS handle it via injected variables
            pushInsetsToWebContent(systemBars);
            return WindowInsetsCompat.CONSUMED;
        });
        ViewCompat.requestApplyInsets(rootView);

        WindowInsetsControllerCompat controller = WindowCompat.getInsetsController(getWindow(), rootView);
        if (controller != null) {
            // Dark status bar/navigation bar icons so they do not blend with light map content
            controller.setAppearanceLightStatusBars(true);
            controller.setAppearanceLightNavigationBars(true);
        }
    }

    private void pushInsetsToWebContent(Insets systemBars) {
        if (getBridge() == null || getBridge().getWebView() == null) {
            return;
        }

        float density = getResources().getDisplayMetrics().density;
        if (density <= 0f) {
            density = 1f;
        }

        int insetTop = Math.round(systemBars.top / density);
        int insetRight = Math.round(systemBars.right / density);
        int insetBottom = Math.round(systemBars.bottom / density);
        int insetLeft = Math.round(systemBars.left / density);

        final String script = String.format(
            Locale.US,
            "window.__androidInsets={top:%d,right:%d,bottom:%d,left:%d};" +
            "if(window.__applyAndroidInsets){window.__applyAndroidInsets();}",
            insetTop,
            insetRight,
            insetBottom,
            insetLeft
        );

        final WebView webView = getBridge().getWebView();
        webView.post(() -> webView.evaluateJavascript(script, null));
    }
}


[pytest]
# Expert pytest configuration using markers and optimization support
testpaths = .
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short -rw --durations=10
markers =
    mobile: Mobile app tests using Appium and session-scoped fixtures
    core: Core essential tests (streamlined test suite)
    legacy: Legacy tests (excluded from default runs) 
    integration: End-to-end integration tests
    unit: Unit tests
    parallel_safe: Tests that can run safely in parallel with others
    parallel_unsafe: Tests that require sequential execution (shared state)
    cache_dependent: Tests that rely on cached artifacts
    build_required: Tests that require fresh APK build
    data_required: Tests that require fresh data processing
    performance: Tests for measuring optimization effectiveness
    infrastructure: Tests for service infrastructure (emulator, Appium)

# Test optimization settings
cache_dir = .pytest_cache
console_output_style = progress
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Performance and parallel execution
junit_duration_report = call
junit_log_passing_tests = false

# Custom options for optimization
addopts = -v --tb=short -rw --durations=10 --strict-markers